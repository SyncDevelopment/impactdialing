From c3be2b5b5916764ad03c2d9ec7c97d27b0a5183c Mon Sep 17 00:00:00 2001
From: Sreehari <sree0514@gmail.com>
Date: Thu, 24 Nov 2011 00:40:51 +0530
Subject: [PATCH 1/2] Power dialing

---
 app/controllers/call_attempts_controller.rb       |    2 +-
 app/models/call_attempt.rb                        |   12 ++------
 app/models/caller_session.rb                      |    1 +
 app/models/campaign.rb                            |   16 ++++++----
 app/models/voter.rb                               |   33 ++++++++++++++------
 config/environments/development.rb                |    2 +-
 public/javascripts/callers/caller_pusher.js       |    4 +-
 spec/controllers/call_attempts_controller_spec.rb |   16 ++++++----
 spec/models/call_attempt_spec.rb                  |    5 ++-
 spec/models/voter_spec.rb                         |    3 +-
 10 files changed, 55 insertions(+), 39 deletions(-)

diff --git a/app/controllers/call_attempts_controller.rb b/app/controllers/call_attempts_controller.rb
index fb320d0..fc08488 100644
--- a/app/controllers/call_attempts_controller.rb
+++ b/app/controllers/call_attempts_controller.rb
@@ -22,7 +22,7 @@ class CallAttemptsController < ApplicationController
                    call_attempt.caller_session.publish('voter_push', call_attempt.campaign.all_voters.to_be_dialed.first.info) if call_attempt.caller_session
                    call_attempt.campaign.use_recordings? ? call_attempt.play_recorded_message : call_attempt.hangup
                  else
-                   call_attempt.connect_to_caller(call_attempt.voter.caller_session)
+                   call_attempt.connect_to_caller
                end
     render :xml => response
   end
diff --git a/app/models/call_attempt.rb b/app/models/call_attempt.rb
index 056cbc7..d2f1b27 100644
--- a/app/models/call_attempt.rb
+++ b/app/models/call_attempt.rb
@@ -50,15 +50,9 @@ class CallAttempt < ActiveRecord::Base
     current_recording.next ? current_recording.next.twilio_xml(self) : current_recording.hangup
   end
 
-  def connect_to_caller(caller_session = nil)
-    caller_session ||= self.campaign.caller_sessions.available.first
-    Rails.logger.debug "connect to _caller #{caller_session.inspect} , #{campaign.predictive_type}"
-    if caller_session && campaign.predictive_type == Campaign::Type::PREDICTIVE
-      Rails.logger.debug "Pushing data for #{voter.info.inspect}"
-      update_attributes(caller_session: caller_session)
-      caller_session.publish('voter_push', voter.info)
-    end
-    caller_session ? conference(caller_session) : hangup
+  def connect_to_caller
+    # caller_session ||= self.campaign.caller_sessions.available.first
+    caller_session.nil? || caller_session.disconnected? ? hangup : conference(caller_session)
   end
 
   def play_recorded_message
diff --git a/app/models/caller_session.rb b/app/models/caller_session.rb
index 55ebb3c..0765f39 100644
--- a/app/models/caller_session.rb
+++ b/app/models/caller_session.rb
@@ -51,6 +51,7 @@ class CallerSession < ActiveRecord::Base
                                  }
     )
     self.publish('calling_voter', voter.info)
+    update_attributes(available_for_call: false)
     attempt.update_attributes(:sid => response["TwilioResponse"]["Call"]["Sid"])
   end
 
diff --git a/app/models/campaign.rb b/app/models/campaign.rb
index c83651e..8f1e1f8 100644
--- a/app/models/campaign.rb
+++ b/app/models/campaign.rb
@@ -353,7 +353,7 @@ class Campaign < ActiveRecord::Base
   def get_dial_ratio
     if self.predictive_type.index("power_")!=nil
       ratio_dial = self.predictive_type[6, 1].to_i
-      DIALER_LOGGER.info "ratio_dial: #{ratio_dial}, #{callers.length}, #{campaign.predictive_type.index("power_")}"
+      DIALER_LOGGER.info "ratio_dial: #{ratio_dial}, #{callers.length}, #{predictive_type.index("power_")}"
     end
 
   end
@@ -370,14 +370,16 @@ class Campaign < ActiveRecord::Base
         end
       end
     end
-
+    short_counter
   end
 
   def determine_short_to_dial
     stats = call_stats(10)
 
     short_counter = num_short_calls_in_progress(stats[:short_time])
-
+    puts "yyyyyyyyyyyyyyyyyy"
+    puts stats[:ratio_short]
+    puts short_counter
     if stats[:ratio_short]>0 && short_counter > 0
       max_short=(1/stats[:ratio_short]).round
       short_to_dial = (short_counter/max_short).to_f.ceil
@@ -427,7 +429,7 @@ class Campaign < ActiveRecord::Base
   def choose_voters_to_dial(num_voters)
     return [] if num_voters < 1
     scheduled_voter_ids = self.all_voters.scheduled.limit(num_voters)
-    (scheduled_voter_ids + self.voters('not called')).reject(&:blocked?).uniq[0..num_voters]
+    (scheduled_voter_ids + self.voters('not called')).reject(&:blocked?).uniq[0..num_voters-1]
   end
 
   def ratio_dial?
@@ -436,7 +438,7 @@ class Campaign < ActiveRecord::Base
 
   def dial_predictive_voters
     if ratio_dial?
-      num_to_call= (callers.length - call_attempts_in_progress.length) * get_dial_ratio
+      num_to_call= (callers.length * get_dial_ratio) - call_attempts_in_progress.length 
     else
       short_to_dial=determine_short_to_dial
       max_calls=determine_pool_size(short_to_dial)
@@ -452,7 +454,7 @@ class Campaign < ActiveRecord::Base
   end
 
   def ring_predictive_voters(voter_ids)
-    voter_ids.each do |voter|
+    voter_ids.each do |voter|      
       voter.dial_predictive
     end
   end
@@ -503,7 +505,7 @@ class Campaign < ActiveRecord::Base
 
   module Type
     PREVIEW = "preview"
-    PREDICTIVE = "predictive"
+    PREDICTIVE = "algorithm1"
   end
 
   def clear_calls
diff --git a/app/models/voter.rb b/app/models/voter.rb
index 93889ae..91da318 100644
--- a/app/models/voter.rb
+++ b/app/models/voter.rb
@@ -82,20 +82,33 @@ class Voter < ActiveRecord::Base
   end
 
   def dial_predictive
-    
+    puts "Eneterdd dia predictive ######"
     # Thread.new {
     @client = Twilio::REST::Client.new TWILIO_ACCOUNT, TWILIO_AUTH
     call_attempt = new_call_attempt(self.campaign.predictive_type)
+    caller_session = call_attempt.campaign.caller_sessions.available.first
+    puts "connect to _caller #{caller_session.inspect} , #{campaign.predictive_type}"
+    DIALER_LOGGER.info "connect to _caller #{caller_session.inspect} , #{campaign.predictive_type}"
+    unless caller_session.nil?
+      DIALER_LOGGER.info "Pushing data for #{info.inspect}"
+      puts "Pushing data for #{info.inspect}"
+      puts "#########"
+      puts "#{caller_session}"
+      call_attempt.update_attributes(caller_session: caller_session)
+      caller_session.update_attributes(:on_call => true, :available_for_call => false)
+      caller_session.publish('voter_push', info)
+    
 
-    @call = @client.account.calls.create(
-        :from => campaign.caller_id,
-        :to => self.Phone,
-        :url => connect_call_attempt_url(call_attempt, :host => Settings.host, :port =>Settings.port),
-        'StatusCallback' => end_call_attempt_url(call_attempt, :host => Settings.host, :port => Settings.port),
-        'IfMachine' => self.campaign.use_recordings? ? 'Continue' : 'Hangup',
-        'Timeout' => campaign.answer_detection_timeout || 20
-    )
-    call_attempt.update_attributes(:status => CallAttempt::Status::INPROGRESS, :sid => @call.sid)
+      @call = @client.account.calls.create(
+          :from => campaign.caller_id,
+          :to => self.Phone,
+          :url => connect_call_attempt_url(call_attempt, :host => Settings.host, :port =>Settings.port),
+          'StatusCallback' => end_call_attempt_url(call_attempt, :host => Settings.host, :port => Settings.port),
+          'IfMachine' => self.campaign.use_recordings? ? 'Continue' : 'Hangup',
+          'Timeout' => campaign.answer_detection_timeout || 20
+      )
+      call_attempt.update_attributes(:status => CallAttempt::Status::INPROGRESS, :sid => @call.sid)
+    end
     # call_attempt.sid
     # }
   end
diff --git a/config/environments/development.rb b/config/environments/development.rb
index ada0df3..9099f41 100644
--- a/config/environments/development.rb
+++ b/config/environments/development.rb
@@ -12,7 +12,7 @@ ImpactDialing::Application.configure do
   #TWILIO_ACCOUNT="ACc0208d4be3e204d5812af2813683243a"
   #TWILIO_AUTH="4e179c64daa7c9f5108bd6623c98aea6"
   #APP_NUMBER="5104048117"
-  APP_HOST = '55ie.localtunnel.com'
+  APP_HOST = '4gc9.localtunnel.com'
   TEST_CALLER_NUMBER="4155130942"
   TEST_VOTER_NUMBER="4155130242"
 
diff --git a/public/javascripts/callers/caller_pusher.js b/public/javascripts/callers/caller_pusher.js
index d79d5b0..e73deb8 100644
--- a/public/javascripts/callers/caller_pusher.js
+++ b/public/javascripts/callers/caller_pusher.js
@@ -41,9 +41,9 @@ function get_session() {
                 set_session(json.caller_session.id);
                 subscribe(json.caller_session.session_key);
                 $("#callin_data").hide();
-				$('#start_calling').hide();
+				        $('#start_calling').hide();
                 $("#called_in").show();          
-				setTimeout(get_voter(), 3000);
+                get_voter();
             }
         }
     })
diff --git a/spec/controllers/call_attempts_controller_spec.rb b/spec/controllers/call_attempts_controller_spec.rb
index 569cbf7..b9c7b07 100644
--- a/spec/controllers/call_attempts_controller_spec.rb
+++ b/spec/controllers/call_attempts_controller_spec.rb
@@ -74,14 +74,15 @@ describe CallAttemptsController do
 
     it "connects the voter to an available caller" do
       Factory(:caller_session, :campaign => campaign, :available_for_call => false)
-      available_caller = Factory(:caller_session, :campaign => campaign, :available_for_call => true, :on_call => true, :caller => Factory(:caller))
+      available_session = Factory(:caller_session, :campaign => campaign, :available_for_call => true, :on_call => true, :caller => Factory(:caller))
+      call_attempt.update_attributes(caller_session: available_session)
       post :connect, :id => call_attempt.id
 
-      call_attempt.reload.caller.should == available_caller.caller
-      available_caller.reload.voter_in_progress.should == voter
+      call_attempt.reload.caller.should == available_session.caller
+      available_session.reload.voter_in_progress.should == voter
       response.body.should == Twilio::TwiML::Response.new do |r|
         r.Dial :hangupOnStar => 'false', :action => disconnect_call_attempt_path(call_attempt, :host => Settings.host) do |d|
-          d.Conference available_caller.session_key, :wait_url => hold_call_url(:host => Settings.host), :waitMethod => 'GET', :beep => false, :endConferenceOnExit => true, :maxParticipants => 2
+          d.Conference available_session.session_key, :wait_url => hold_call_url(:host => Settings.host), :waitMethod => 'GET', :beep => false, :endConferenceOnExit => true, :maxParticipants => 2
         end
       end.text
     end
@@ -89,7 +90,7 @@ describe CallAttemptsController do
     it "connects a voter to a specified caller" do
       Factory(:caller_session, :campaign => campaign, :available_for_call => true, :on_call => false)
       available_caller = Factory(:caller_session, :campaign => campaign, :available_for_call => true, :on_call => false)
-      voter.update_attribute(:caller_session, available_caller)
+      call_attempt.update_attribute(:caller_session, available_caller)
       post :connect, :id => call_attempt.id
       response.body.should == Twilio::TwiML::Response.new do |r|
         r.Dial :hangupOnStar => 'false', :action => disconnect_call_attempt_path(call_attempt, :host => Settings.host) do |d|
@@ -118,7 +119,8 @@ describe CallAttemptsController do
     end
 
     it "hangs up if there are no callers on call" do
-      available_caller = Factory(:caller_session, :campaign => campaign, :available_for_call => false, :on_call => false)
+      available_caller_session = Factory(:caller_session, :campaign => campaign, :available_for_call => false, :on_call => false)
+      call_attempt.update_attributes(caller_session: available_caller_session)
       post :connect, :id => call_attempt.id
       response.body.should == Twilio::TwiML::Response.new { |r| r.Hangup }.text
     end
@@ -172,7 +174,7 @@ describe CallAttemptsController do
       session_key = 'foo'
       custom_field = Factory(:custom_voter_field)
       Factory(:custom_voter_field_value, :voter => voter, :custom_voter_field => custom_field, :value => 'value')
-      Factory(:caller_session, :campaign => campaign, :available_for_call => true, :on_call => true, :caller => Factory(:caller), :session_key => session_key, :voter_in_progress => voter)
+      call_attempt.update_attributes(caller_session: Factory(:caller_session, :campaign => campaign, :available_for_call => true, :on_call => true, :caller => Factory(:caller), :session_key => session_key, :voter_in_progress => voter))
       pusher_session = mock
       pusher_session.should_receive(:trigger).with('voter_connected', {:attempt_id=> call_attempt.id, :voter => voter.info}.merge(:dialer => campaign.predictive_type))
       Pusher.stub(:[]).with(session_key).and_return(pusher_session)
diff --git a/spec/models/call_attempt_spec.rb b/spec/models/call_attempt_spec.rb
index 3cd1d24..6d4a7d3 100644
--- a/spec/models/call_attempt_spec.rb
+++ b/spec/models/call_attempt_spec.rb
@@ -103,6 +103,7 @@ describe CallAttempt do
       voter = Factory(:voter, :campaign => campaign)
       caller_session = Factory(:caller_session, :campaign => campaign, :available_for_call => true, :on_call => true, :caller => Factory(:caller))
       call_attempt = Factory(:call_attempt, :voter => voter, :campaign => campaign)
+      call_attempt.update_attributes(caller_session: caller_session)
       call_attempt.connect_to_caller.should == call_attempt.conference(caller_session)
       call_attempt.caller.should == caller_session.caller
       caller_session.attempt_in_progress.should == call_attempt
@@ -114,7 +115,8 @@ describe CallAttempt do
       Factory(:caller_session, :campaign => campaign, :available_for_call => true, :on_call => true, :caller => Factory(:caller))
       caller_session = Factory(:caller_session, :campaign => campaign, :available_for_call => true, :on_call => true, :caller => Factory(:caller))
       call_attempt = Factory(:call_attempt, :voter => voter, :campaign => campaign)
-      call_attempt.connect_to_caller(caller_session).should == call_attempt.conference(caller_session)
+      call_attempt.update_attributes(caller_session: caller_session)
+      call_attempt.connect_to_caller.should == call_attempt.conference(caller_session)
       call_attempt.caller.should == caller_session.caller
     end
 
@@ -123,6 +125,7 @@ describe CallAttempt do
       voter = Factory(:voter, :campaign => campaign)
       caller_session = Factory(:caller_session, :campaign => campaign, :available_for_call => true, :on_call => true, :caller => Factory(:caller))
       call_attempt = Factory(:call_attempt, :voter => voter, :campaign => campaign)
+      call_attempt.update_attributes(caller_session: caller_session)
       call_attempt.connect_to_caller
       call_attempt.reload.caller_session.should == caller_session
       caller_session.attempt_in_progress.should == call_attempt
diff --git a/spec/models/voter_spec.rb b/spec/models/voter_spec.rb
index 23bae3d..5667c3f 100644
--- a/spec/models/voter_spec.rb
+++ b/spec/models/voter_spec.rb
@@ -117,8 +117,9 @@ describe Voter do
       end
 
       it "is dialed" do
+        caller_session = Factory(:caller_session, :available_for_call => true, :on_call => true, campaign: campaign)
         voter.dial_predictive
-        call_attempt = voter.call_attempts.last
+        call_attempt = CallAttempt.first
         call_attempt.sid.should == "sid"
         call_attempt.status.should == CallAttempt::Status::INPROGRESS
       end
-- 
1.7.3.4

