<% content_for :javascripts do %>
<script type="text/javascript" src="https://static.twilio.com/libs/twiliojs/1.0/twilio.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.js"></script>
<script src="https://d3dy5gmtp8yhk7.cloudfront.net/1.11/pusher.min.js" type="text/javascript" ></script>
<%= javascript_include_tag %>
<%= javascript_include_tag 'monitors/jquery.stopwatch', 'monitors/monitor_pusher', 'monitors/assign_caller_to_campaign','ICanHaz.min.js' %>


  <script type="text/javascript">
      var pusher = new Pusher('<%= Pusher.key %>');
      setInterval(function() {
        $('a.client-include').each(function(index,element){
      	  var url = $(element).attr('href');
      	  var parent = $(element).parent('div');
         	  $.ajax({
      	  url: url,
      	  success: function(data){
      		$(parent).html(data);
      	  }
      	});
      	});        
      }, 10000);
          	
  </script>

<script type="text/javascript">

  Twilio.Device.setup("<%= @token %>", {'debug':true});

  Twilio.Device.connect(function (conn) {
  });
  Twilio.Device.ready(function (device) {})
  Twilio.Device.error(function (error) {
    alert(error.message);
  });
  
  
  function de_activate_monitor(){
    $.ajax({
        url : "/client/monitors/deactivate_session",
        data : {monitor_session : $('monitor_session').text()},
        type : "GET",
        async : false,
        success : function(response) {}
      });
  }
  
  $(window).bind("beforeunload", function(){
      de_activate_monitor();
    })

  function monitor(session_id, action){
    params = {'session_id': session_id, 'type': action, 'monitor_session' : $('monitor_session').text()};
    $('.stop_monitor').show();
    Twilio.Device.connect(params)
  }
  function disconnect_all(){
    $('status').text("Status: Disconnected.")
    $('.stop_monitor').hide();
    $.each($('tr.caller'), function(){
      $(this).removeAttr("on_call");
	  $(this).removeAttr("mode");
    });
    Twilio.Device.disconnectAll();
    return false;
  }
  
  function switch_mode(session, mode){
    $.ajax({
        url : "/client/monitors/switch_mode",
        data : {session_id : session,type : mode,monitor_session : $('monitor_session').text()},
        type : "GET",
        success : function(response) {
          $('status').text(response)
          }
    })
  }
  
  function kick_off(session){
    $.ajax({
        url : "/client/monitors/kick_off",
        data : {session_id : session},
        type : "GET"
    })
  }
  

	function switch_caller(current_session_id, next_session_id, action, status){
		$.ajax({
        url : "/client/monitors/stop",
        data : {session_id : current_session_id},
        type : "GET",
        success : function(response) {
          request_to_switch(next_session_id, action, status);
        }
    });
	}
	
	function request_to_switch(next_session_id, action, status){
		$.ajax({
        url : "/client/monitors/start",
        data : {'session_id' : next_session_id, 'type': action, 'monitor_session' : $('monitor_session').text()},
        type : "GET",
        success : function(response) {}
    });
	}

  $(function() {
		$('.stop').live('click', function(){
			stop($(this).attr("session_id"))
		});
		
    $('.monitor').live('click', function(){
			var session_id = $(this).attr("session_id");
			var action = $(this).attr("action");
			if (action == 'kickoff'){
			  kick_off(session_id);
			  return;
			}
			
      if($(this).parent().parent().attr("on_call") == "true"){
        switch_mode(session_id, action);
				$(this).parent().parent().attr("mode", action)
      }
      else{
				var no_monitoring = true;
        $.each($(this).parent().parent().siblings(), function(){
          if($(this).attr("on_call") == "true"){
						switch_caller($(this).children().children().attr("session_id"), session_id, action, status);
						no_monitoring = false;
            $(this).removeAttr("on_call");
            $(this).removeAttr("mode");
          }
        });
				$(this).parent().parent().attr("on_call","true");
				$(this).parent().parent().attr("mode", $(this).attr("action"))
				if(no_monitoring){
        	monitor(session_id, action);
				}
      }
      return false;
    })
    
  });

</script>


<% end %>
<h1>Monitor</h1>
<monitor_session style="display:none"></monitor_session>
  
<div id="monitor_campaigns">
  <%= link_to "Campaigns", recent_interactions_following_url(:id=>@tab_user.identity), :class=>'client-include'    %>
  <%= render "campaigns" %>
</div>
<br>
<div id="monitor_callers">
  <%= render "callers" %>
</div>

<br>

<h2>System-wide settings</h2>
<p>Call recording is currently <%= @account.record_calls? ? "on" : "off" %>. Links to recordings will appear in each campaign's Download report.</p>
<p class="actions"><%= link_to "Turn call recording #{@account.record_calls? ? "off" : "on" }", {:action=>"toggle_call_recording"}, {:class => 'action secondary'}, %></p>
<p class="actions"><%= link_to "Manage Do Not Call list", blocked_numbers_path, :class => 'action secondary' %></p>